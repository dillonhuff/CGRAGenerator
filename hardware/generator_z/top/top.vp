//; use POSIX;
///////////////////////////////////////////////////////////////////
// CGRA TOP generator 
//
//////////////////////////////////////////////////////////////////
//; #global
//; #<BUS_NAME>:<number of bits>b#<seg1_length>_<seg1_register_after_hops>:<seg2_length>_<seg2_register_after_hops>:...
//;   my $bus_config = "BUS16:16b#1_4:1_4:1_4:1_4:1_4 BUS1:1b#1_4:1_4:1_4:1_4:1_4";
//; if ($ENV{'CGRA_GEN_ALL_REG'}==1) {
//;   $bus_config = "BUS16:16b#1_1:1_1:1_1:1_1:1_1 BUS1:1b#1_1:1_1:1_1:1_1:1_1";
//; }
//; my $all_segments_for_all_tiles = 1;
//; # specify the number of global signals available for each pe/mem tile
//; my $global_signal_count = 4;
//; my $sides = 4;
//; # for cb
//; # IMP: ensure cb_connections length is equal to (num of tracks defined in bus_config)*2 + num of global signals
//; #      eg: for 5 wires and 4 global signals, set cb_connections = "11111111111111" i.e. 5*2 + 4 = 14
//; #      '1' bits to enable muxing of all wires passing through the CB.
//; my $cb_connections = "11111111111111";
//; # for sb
//; my $sb_fs = "10000#10000#10000";
//; #
//; # for IOs
//; # <number of bits> <number of bits> <number of bits> <number of bits>
//; # There are four die sides 0-3 that can host IOs. Each token in the string above specifies
//; # IO count on a side, starting from the right side and going clockwise eg: "10 11 12 13"
//; # implies 10 IOs on the right side, 11 IOs on the bottom, and so on. Each IO will generate
//; # a 1-bit IO tile on the specified side. The generator will greedily form groups of 16 1-bit
//; # IOs to create a 16-bit IO tile. The 16-bit IO tile is placed next to the LS 1-bit
//; # IO tile of the group. Both 16 bit and 1 bit IO tiles are of size 1x1. 16-bit and 1-bit 
//; # IO tiles occupy separate rows (or columns) on the CGRA fabric. Any unused space on the
//; # 16-bit (or 1-bit) IO row is filled with empty tiles. Empty tiles do not contain any 
//; # resources or even wires. IOs are numbered clockwise i.e. IO0 will be at the top for the
//; # right side, rightmost on the bottom side and so on.
//; #
//; my @IO_count = qw(32 32 32 32);
//; #
//; #
//; #
//; # SR 12/2017: want 8x8 grid!
//; my $sr_grid_size = "default";
//; $sr_grid_size = "8x8";
//; # $sr_grid_size = "64x64";
//; if ($sr_grid_size == "8x8") { @IO_count = qw(8 8 8 8); }
//; if ($sr_grid_size == "64x64") { @IO_count = qw(64 64 64 64); }
//; #
//; #
//; #
//; my $tile_config;
//; $tile_config->{ 'pe' } = {
//;       type => 'pe_tile_new',
//;       sides => $sides,
//;       is_bidi => 0,
//;       bus_config => $bus_config,
//;       cb_connections => $cb_connections,
//;       global_signal_count => $global_signal_count,
//;       has_constant => 0,
//;       tile_height => 1,
//;       tile_width => 1,
//;       reg_inputs => 1,
//;       reg_out => 0, 
//;       use_add => 1,
//;       use_cntr => 1,
//;       use_bool => 1,
//;       use_shift => 1,
//;       use_div => 0,
//;       mult_mode => 1,
//;       is_msb => 0,
//;       en_double => 0,
//;       lut_inps => 3,
//;       sb_fs => $sb_fs,
//;       all_segments_for_all_tiles => $all_segments_for_all_tiles
//; };
//; $tile_config->{ 'mem' } = {
//;       type => 'memory_tile',
//;       gen_mem_for_busname => 'BUS16',
//;       control_busname => 'BUS1',
//;       ddepth => 1024,
//;       tile_height => 2,
//;       tile_width => 1,
//;       bus_config => $bus_config,
//;       cb_connections => $cb_connections,
//;       global_signal_count => $global_signal_count,
//;       sb_fs => $sb_fs
//; };
//; $tile_config->{ 'io1' } = {
//;       type => 'io1bit',
//;       tile_height => 1,
//;       tile_width => 1,
//; };
//; $tile_config->{ 'io16' } = {
//;       type => 'io16bit',
//;       tile_height => 1,
//;       tile_width => 1,
//; };
//; $tile_config->{ 'empty' } = {
//;       type => 'empty',
//;       tile_height => 1,
//;       tile_width => 1,
//; };
//; # Specify, in form of a AxB grid, the basic tile pattern that repeats. Each
//; # grid node represents a unit tile (1x1) on the CGRA fabric. Assign a tile
//; # type to each node. Tile types are listed above. If the width or height of
//; # a tile type is more than 1x1 (eg: memory), pad the the tile type in the 
//; # grid with Xes (eg: if mem tile width is 2, the tile will be instantiated
//; # in the grid as 'mem X'. If tile height is 2, the node in the row below the
//; # tile node will be X). Multiple spaces are treated as a single space. Do
//; # not include IO tiles in the basic block.
//; #
//; my $basic_block  = "pe pe pe mem\n";
//;    $basic_block .= "pe pe pe X  ";
//; #
//; # Number of times the basic block repeats in the horizontal direction.
//; #
//; my $basic_block_repeat_x = 8;
//; #
//; # Number of times the basic block repeats in the vertical direction
//; #
//; my $basic_block_repeat_y = 16;
//; #
//; #
//; #
//; # SR 12/2017: want 8x8 grid!
//; if ($sr_grid_size == "8x8")   { $basic_block_repeat_x =  2; $basic_block_repeat_y =  4; }
//; if ($sr_grid_size == "64x64") { $basic_block_repeat_x = 16; $basic_block_repeat_y = 32; }
//; #
//; #
//; #
//; #####################################################
//; #Populate bus track hash
//; #####################################################
//; my %bus_width_hash = ();
//; my %bus_segment_hash = ();
//; my %bus_registered_outputs_hash = ();
//; my %bus_num_tracks_hash = ();
//; foreach my $bus (split(' ', $bus_config)) {
//;   if ($bus=~m/(BUS\S+):(\S+)b#(\S+)/) {
//;     my $track_count=0;
//;     my $bus_name = $1;
//;     $bus_width_hash{ $bus_name } = $2;
//;     $bus_segment_hash{ $bus_name } = $3;
//;     foreach my $seg_info (split(':',$bus_segment_hash{ $bus_name })) {
//;       $seg_info =~ m/(\S+)_(\S+)/;
//;       my $segment_length = $1;
//;       if ($all_segments_for_all_tiles==1) {
//;         $track_count += $segment_length;
//;       } else {
//;         $track_count += 1;
//;       }
//;     }
//;     $bus_num_tracks_hash{ $bus_name } = $track_count;
//;   }
//; }
//; #####################################################
//; #Setup basic tile pattern
//; #####################################################
//;   $basic_block=~s/[ ]+/ /g;
//;   my @rows=split /\n/, $basic_block;
//;   my $h_index = 0;
//;   my %basic_block_hash = ();
//;   my $basic_block_width = 0;
//;   my $basic_block_height = scalar @rows;
//;   foreach my $r (@rows) {
//;     my $w_index = 0;
//;     my @cols=split /\s/, $r;
//;     $basic_block_width = scalar @cols;
//;     foreach my $node (@cols) {
//;       my $key = "${w_index}_${h_index}";
//;       $basic_block_hash{ $key } = $node;
//;       $w_index += 1;
//;     }
//;     $h_index += 1;
//;   }
//; #####################################################
//; #Initialize cgra grid
//; #####################################################
//; my %tile_grid;
//; # CGRA grid width = (block_width * blocks_repeat_x) + 2 IO cols on left + 2 IO cols on right
//; my $cgra_grid_width = ($basic_block_width * $basic_block_repeat_x) + 4;
//; #
//; my $cgra_grid_height = ($basic_block_height * $basic_block_repeat_y) + 4;
//; # 
//; # Default all cgra grid nodes to empty tile
//; for (my $w=0; $w<$cgra_grid_width; $w++) {
//;   for (my $h=0; $h<$cgra_grid_height; $h++) {
//;     my $cgra_key = "${w}_${h}";
//;     $tile_grid{$cgra_key} = 'empty'; 
//;   }
//; }
//;
//; # Instantiate nonIO part of the grid using basic block
//; for (my $w=2; $w<($cgra_grid_width-2); $w++) {
//;   for (my $h=2; $h<($cgra_grid_height-2); $h++) {
//;     my $wa = $w - 2; my $ha = $h - 2;
//;     my $cgra_key = "${w}_${h}";
//;     my $basic_block_key = ($wa % $basic_block_width) . "_" . ($ha % $basic_block_height); 
//;     $tile_grid{$cgra_key} = $basic_block_hash{$basic_block_key};
//;   }
//; }
//; # Instantiate IO tiles on the right. IOs are vertically centered.
//; if ($IO_count[0] > $cgra_grid_height - 4 ) {print STDOUT "ERROR: Too many IOs on the right. Quitting\n"; exit;}
//; my $io_start_y = int(($cgra_grid_height/2) - ($IO_count[0]/2));
//; my $w1 = $cgra_grid_width - 1;
//; my $w16 = $cgra_grid_width - 2;
//; for (my $h=$io_start_y; $h < ($IO_count[0]+$io_start_y); $h++) {
//;   my $cgra_key = "${w1}_${h}";
//;   $tile_grid{$cgra_key} = 'io1';
//;   $tile_grid{"${cgra_key}_side"} = 2; 
//;   $tile_grid{"${cgra_key}_count"} = ($h -$io_start_y);
//;   if ((($h-$io_start_y)%16)==0 && ((($h-$io_start_y)+16)<=$IO_count[0])) {
//;     $cgra_key = "${w16}_${h}";
//;     $tile_grid{$cgra_key} = 'io16';
//;     $tile_grid{"${cgra_key}_side"} = 2; 
//;     $tile_grid{"${cgra_key}_count"} = ($h -$io_start_y); 
//;   }
//; }
//; # instantiate io tiles on the bottom. ios are horizontally centered.
//; if ($IO_count[1] > $cgra_grid_width - 4 ) {print STDOUT "ERROR: Too many ios on the bottom. quitting\n"; exit;}
//; my $io_start_x = int(($cgra_grid_width/2) - ($IO_count[1]/2));
//; my $h1 = $cgra_grid_height - 1;
//; my $h16 = $cgra_grid_height - 2;
//; for (my $w=$io_start_x; $w < ($IO_count[1]+$io_start_x); $w++) {
//;   my $cgra_key = "${w}_${h1}";
//;   $tile_grid{$cgra_key} = 'io1';
//;   $tile_grid{"${cgra_key}_side"} = 3; 
//;   $tile_grid{"${cgra_key}_count"} = ($w -$io_start_x);
//;   if ((($w-$io_start_x)%16)==0 && ((($w-$io_start_x)+16)<=$IO_count[1])) {
//;     $cgra_key = "${w}_${h16}";
//;     $tile_grid{$cgra_key} = 'io16';
//;     $tile_grid{"${cgra_key}_side"} = 3; 
//;     $tile_grid{"${cgra_key}_count"} = ($w -$io_start_x);
//;   }
//; } 
//; # Instantiate IO tiles on the left. IOs are vertically centered.
//; if ($IO_count[2] > $cgra_grid_height - 4 ) {print STDOUT "ERROR: Too many IOs on the left. Quitting\n"; exit;}
//; my $io_start_y = int(($cgra_grid_height/2) - ($IO_count[2]/2));
//; my $w1 = 0;
//; my $w16 = 1;
//; for (my $h=$io_start_y; $h < ($IO_count[2]+$io_start_y); $h++) {
//;   my $cgra_key = "${w1}_${h}";
//;   $tile_grid{"${cgra_key}_side"} = 0; 
//;   $tile_grid{"${cgra_key}_count"} = ($h -$io_start_y); 
//;   $tile_grid{$cgra_key} = 'io1';
//;   if ((($h-$io_start_y)%16)==0 && ((($h-$io_start_y)+16)<=$IO_count[2])) {
//;     $cgra_key = "${w16}_${h}";
//;     $tile_grid{$cgra_key} = 'io16';
//;     $tile_grid{"${cgra_key}_side"} = 0; 
//;     $tile_grid{"${cgra_key}_count"} = ($h -$io_start_y); 
//;   }
//; } 
//; # Instantiate IO tiles on the top. IOs are horizontally centered.
//; if ($IO_count[3] > $cgra_grid_width - 4 ) {print "ERROR: Too many IOs on the top. Quitting\n"; exit;}
//; my $io_start_x = int(($cgra_grid_width/2) - ($IO_count[3]/2));
//; my $h1 = 0;
//; my $h16 = 1;
//; for (my $w=$io_start_x; $w < ($IO_count[3]+$io_start_x); $w++) {
//;   my $cgra_key = "${w}_${h1}";
//;   $tile_grid{"${cgra_key}_side"} = 1; 
//;   $tile_grid{"${cgra_key}_count"} = ($w -$io_start_x); 
//;   $tile_grid{$cgra_key} = 'io1';
//;   if ((($w-$io_start_x)%16)==0 && ((($w-$io_start_x)+16)<=$IO_count[3])) {
//;     $cgra_key = "${w}_${h16}";
//;     $tile_grid{$cgra_key} = 'io16';
//;     $tile_grid{"${cgra_key}_side"} = 1; 
//;     $tile_grid{"${cgra_key}_count"} = ($w -$io_start_x);
//;   }
//; }
//; #####################################################
//; #Print cgra grid as comments in the verilog file
//; #####################################################
//; my $tile_count=2;
//; for (my $h=0; $h<$cgra_grid_height; $h++) {
//;   print "//";
//;   for (my $w=0; $w<$cgra_grid_width; $w++) {
//;     my $key = "${w}_${h}";
//;     my $tile_type = $tile_grid{$key};
//;     my $tile_count_hex = sprintf("0x%X", $tile_count);
//;     if (($tile_type ne "X") && ($tile_type ne "empty")) {
//;       printf "%-12s", "${tile_type}_${tile_count_hex}";
//;       $tile_grid{"${key}_addr"} = $tile_count;
//;       $tile_count+=1;
//;     } else {
//;       printf "%-12s", ".......";
//;     }
//;   }
//;   print "\n";
//; }
//; my $core_tile_addr = $tile_count;
//; #####################################################
//; #Create verilog
//; #####################################################
module top(
clk_in,
reset_in,
//; for (my $side=0; $side<4; $side++) {
//;   for (my $count=0; $count< $IO_count[$side]; $count++) {
        pad_S`$side`_T`$count`,
//;   }
//; }
// -------------------------------------
// PLACEHOLDERS FOR VERILATOR PORT WIRES
//
// VERILATOR_PORT0
// VERILATOR_PORT1
// VERILATOR_PORT2
// VERILATOR_PORT3
// VERILATOR_PORT4
// VERILATOR_PORT5
// VERILATOR_PORT6
// VERILATOR_PORT7
// VERILATOR_PORT8
// -------------------------------------
config_addr_in,
config_data_in,
tdi,
tdo,
tms
);

//;open(INFO, ">cgra_info.txt") or die "Couldn't open file cgra_info.txt, $!";
//;print INFO "<CGRA>\n";

  input clk_in;
  input reset_in;
  input [31:0] config_addr_in;
  input [31:0] config_data_in;
  input tdi;
  input tms;
  output tdo;
   // --------------------------------------
   // PLACEHOLDERS FOR VERILATOR INPUT WIRES
   // --------------------------------------
   // VERILATOR_IN0
   // VERILATOR_IN1
   // VERILATOR_IN2
   // VERILATOR_IN3
   // VERILATOR_IN4
   // --------------------------------------
//; for (my $side=0; $side<4; $side++) {
//;   for (my $count=0; $count<$IO_count[$side]; $count++) {
  inout pad_S`$side`_T`$count`;
//;   }
//; }
   // ---------------------------------------
   // PLACEHOLDERS FOR VERILATOR OUTPUT WIRES
   // ---------------------------------------
   // VERILATOR_OUT0
   // VERILATOR_OUT1
   // VERILATOR_OUT2
   // VERILATOR_OUT3
   // VERILATOR_OUT4
   // ---------------------------------------

//; ###################################################################################

wire [31:0] config_addr;
wire [31:0] config_data;
wire clk;
wire reset;

//; my $global_controller_obj = generate("global_controller", "global_controller", dummy_value => 0);
    `$global_controller_obj->instantiate()` 
    (
      .clk_in(clk_in),
      .clk_out(clk),
      .reset_in(reset_in),
      .reset_out(reset),
      .config_addr_in(config_addr_in),
      .config_addr_out(config_addr),
      .config_data_in(config_data_in),
      .config_data_out(config_data),
      .tdi(tdi),
      .tdo(tdo),
      .tms(tms)
    );

// FIXME Note there are LOTS of unused wires being created below!
// FIXME I assume they will be hooked up to something eventually
// FIXME when this module is ready to be part of a working testbench...?
// FIXME At which point the verilator directive(s) can be removed maybe...

/* verilator lint_off UNUSED */
//#####################################################
//#Create wires
//#Naming: wire_<row>_<col>_<busname>_S<side_T<track>
//#Where : row,col = row,col of source tile
//#####################################################
//; for (my $h=0; $h<$cgra_grid_height; $h++) {
//;   for (my $w=0; $w<$cgra_grid_width; $w++) {
//;     my $key = "${w}_${h}";
//;     my $tile_type = $tile_grid{$key};
//;     my $tile_height = $tile_config->{ $tile_type }{ 'tile_height' };
//;     for my $bus (sort keys %bus_num_tracks_hash) {
//;       my $num_tracks = $bus_num_tracks_hash { $bus };
//;       my $bus_width = $bus_width_hash { $bus };
//;       for(my $s=0; $s<$sides; $s++) {
//;         for(my $t=0; $t<$num_tracks; $t++) {
    wire [`$bus_width-1`:0] wire_`$h`_`$w`_`$bus`_S`$s`_T`$t`;
//;         }
//;       }
//;     }
//;     if ($tile_type eq "mem") {
//;       my $data_bus = $tile_config->{ $tile_type }{ 'gen_mem_for_busname' };
//;       my $bus_width = $bus_width_hash { $data_bus };
    wire [`$bus_width-1`:0] mem_chain_`$h`_`$w`;
    wire  mem_chain_valid_`$h`_`$w`;
//;     }
//;     if (($tile_type eq "mem") || ($tile_type eq "pe")) {
//;       for (my $i=0; $i<$global_signal_count; $i++) {
//;         if ((${w}%2==0) && (${h}%2==0)) {
      wire global_wire_h2l_1_`${i}`_`(int(floor((${w}-2)/2))+2)`_`(int(floor((${h}-2)/2))+2)`;
//;         }
//;       }
    wire global_wire_l2h_0_`${w}`_`${h}`;
//;     }
//;   }
//; }
/* verilator lint_on UNUSED */


//; my $tile_hash_ref;
//#####################################################
//#Instantiate components
//#####################################################
//; for (my $h=0; $h<$cgra_grid_height; $h++) {
//;   for (my $w=0; $w<$cgra_grid_width; $w++) {
//;     my $key = "${w}_${h}";
//;     my $tile_type = $tile_grid{$key};
//;     my $tile_addr = $tile_grid{ "${key}_addr" };
//;     my $io_side = -1;
//;     my $io_count = -1;
//;     my $io_group = -1;
//;     if (($tile_type eq "X")) {next;}
//;     if ($tile_type=~m/io/) {
//;       $io_side = $tile_grid{"${key}_side"};
//;       $io_count = $tile_grid{"${key}_count"};
//;       $io_group = int($io_count/16);
//;     }
//;     my $options = "";
//;     my $tile_addr_hex = sprintf("%X", $tile_addr);
//;     my $tile_id = sprintf("%s_0x%s", $tile_type, $tile_addr_hex);
//;#Add PE specific parameters from the tile config to the generate command
//;#All paramters in the tile_config hash except type, tile_height/width are passed to the generator
//;     while( my ($f, $v) = each $tile_config->{ $tile_type } ) {
//;#       print "$f : $v\n";
//;       if (($f!~m/type/) && ($f!~m/tile_height/) && ($f!~m/tile_width/)) {
//;         $options .= " $f => \"$v\",";
//;       }
//;     }
//;     if ($tile_type eq "mem" || $tile_type eq "pe") { 
//;#Create feedthrough and registered output masks based on tile_x
//;       my $sb_feedthrough = "";
//;       my $sb_registered = "";
//;       my $tile_x = $w;
//;       while( my ($bus, $width) = each %bus_width_hash ) {
//;         $sb_feedthrough .= " $bus:";
//;         $sb_registered .= " $bus:";
//;         foreach my $seg_info (split(':', $bus_segment_hash{$bus})) {
//;           $seg_info=~m/(\S+)_(\S+)/;
//;           my $seg_len = $1;
//;           my $seg_reg = $2;
//;           my $count = 1;
//;           if ($all_segments_for_all_tiles==1) {
//;              $count = $seg_len;
//;           }
//;           for (my $s=0; $s<$count; $s++) {
//;             if (($tile_x%$seg_len)==$s) {
//;               $sb_feedthrough .= "0";
//;               my $track_reg_repeats_after = $seg_len*$seg_reg;
//;               if (($tile_x%$track_reg_repeats_after)==$s) {
//;                 $sb_registered .= "1";
//;               } else {
//;                 $sb_registered .= "0";
//;               }
//;             } else {
//;               $sb_feedthrough .= "1";
//;               $sb_registered .= "0";
//;             }
//;           }
//;         }
//;       }
//;       $sb_feedthrough =~ s/^\s+|\s+$//;
//;       $sb_registered =~ s/^\s+|\s+$//;
//;       $options .= "feedthrough_outputs => \"$sb_feedthrough\", registered_outputs => \"$sb_registered\",";
//;     } elsif (($tile_type eq "io1") || ($tile_type eq "io16")) { 
//;       $options = "io_group => $io_group, side => $io_side,";
//;     } else {
//;       $options = "";
//;    }
//;#Create a tile_is composed of all options and see if such a tile has been generated before
//;#If not generated, generate it and add to a hash. Else, clone the existing tile
//;     $options =~ s/,$//;
//;     my $options_key = "${tile_type}_${options}";
//;     $options_key =~ s/\s/_/g;
//;     $options_key =~ s/=>/_/g;
//;     $options_key =~ s/\"/_/g;
//;     $options_key =~ s/:/_/g;
//;     $options_key =~ s/#/_/g;
//;     $options_key =~ s/,/_/g;
//;     my $inst_obj;
//;     if ($tile_type ne "empty") {
//;       if (not defined $tile_hash_ref->{$options_key}) {
//;         my $cmd = "\$tile_hash_ref->{'$options_key'} = generate('$tile_config->{ $tile_type }{ 'type' }', '$tile_id', $options);";
//;         eval $cmd;
//;         $inst_obj = $tile_hash_ref->{$options_key}; 
//;       } else {
//;         my $obj = $tile_hash_ref->{$options_key};
//;         $inst_obj = clone($obj, $tile_id);
//;       }
//;     }
//;    if ($tile_type eq "mem") {
    `$inst_obj->instantiate()` 
    (
      .clk_in(clk),
      .reset(reset),
      .config_addr(config_addr),
      .config_data(config_data),
//;   for (my $row=0; $row < $tile_config->{ $tile_type }{ 'tile_height' }; $row++) {
//;     for my $bus (sort keys %bus_num_tracks_hash) {
//;       my $num_tracks = $bus_num_tracks_hash { $bus };
//;       my $bus_width = $bus_width_hash { $bus };
//;       for(my $s=0; $s<$sides; $s++) {
//;         for(my $t=0; $t<$num_tracks; $t++) {
//;# NB: Change the following for the case of sides > 4
//;           if ($s==0 || $s==2) {
      .out_`$row`_`$bus`_`$s`_`$t`(wire_`$h+$row`_`$w`_`$bus`_S`$s`_T`$t`),
//;           }
//;           if ($s==1 && $row==($tile_config->{ $tile_type }{ 'tile_height' }-1)) {
      .out_`$row`_`$bus`_`$s`_`$t`(wire_`$h+$row`_`$w`_`$bus`_S`$s`_T`$t`),
//;           }
//;           if ($s==3 && $row==0) {
      .out_`$row`_`$bus`_`$s`_`$t`(wire_`$h+$row`_`$w`_`$bus`_S`$s`_T`$t`),
//;           }
//;           my $opposite_side = $s + int($sides*0.5);
//;           if ($opposite_side > ($sides-1)) {$opposite_side -= $sides;}
//;           my $w_delta=0;
//;           my $h_delta=0;
//;#Modification needed to support different 'sides' options
//;           if ($sides==4) {
//;             if ($s==0) {$w_delta=1;}
//;             if ($s==1) {$h_delta=1;}
//;             if ($s==2) {$w_delta=-1;}
//;             if ($s==3) {$h_delta=-1;}
//;           }
//;           my $h_new = $h+$row+$h_delta;
//;           my $w_new = $w+$w_delta;
//;           if ($s==0 || $s==2) {
      .in_`$row`_`$bus`_`$s`_`$t`(wire_`$h_new`_`$w_new`_`$bus`_S`$opposite_side`_T`$t`),
//;           }
//;           if ($s==1 && $row==($tile_config->{ $tile_type }{ 'tile_height' }-1)) {
      .in_`$row`_`$bus`_`$s`_`$t`(wire_`$h_new`_`$w_new`_`$bus`_S`$opposite_side`_T`$t`),
//;           }
//;           if ($s==3 && $row==0) {
      .in_`$row`_`$bus`_`$s`_`$t`(wire_`$h_new`_`$w_new`_`$bus`_S`$opposite_side`_T`$t`),
//;           }
//;         }
//;       }
//;     }
//;   }
//;   my $h_new = $h+2;
//;   if ($h_new >= ($cgra_grid_height - 4)) {
//;   my $data_bus=$tile_config->{ $tile_type }{ 'gen_mem_for_busname' };
//;   my $width=$bus_width_hash { $data_bus };
      .chain_in(`$width`'d0),
      .chain_wen_in(1'b0),
//;   } else {
      .chain_in(mem_chain_`$h_new`_`$w`),
      .chain_wen_in(mem_chain_valid_`$h_new`_`$w`),
//;   }
      .chain_out(mem_chain_`$h`_`$w`),
      .chain_valid_out(mem_chain_valid_`$h`_`$w`),
//;   for (my $i=0; $i<$global_signal_count; $i++) {
      .gin_`${i}`(global_wire_h2l_1_`${i}`_`(int(floor((${w}-2)/2))+2)`_`(int(floor((${h}-2)/2))+2)`),
//;   }
      .gout(global_wire_l2h_0_`${w}`_`${h}`),
      .tile_id(16'h`$tile_addr_hex`)
    );
//;    } elsif ($tile_type eq "pe") {
    `$inst_obj->instantiate()` 
    (
      .clk_in(clk),
      .reset(reset),
      .config_addr(config_addr),
      .config_data(config_data),
//;     for my $bus (sort keys %bus_num_tracks_hash) {
//;       my $num_tracks = $bus_num_tracks_hash { $bus };
//;       my $bus_width = $bus_width_hash { $bus };
//;       for(my $s=0; $s<$sides; $s++) {
//;         for(my $t=0; $t<$num_tracks; $t++) {
      .out_`$bus`_S`$s`_T`$t`(wire_`$h`_`$w`_`$bus`_S`$s`_T`$t`),
//;       my $opposite_side = $s + int($sides*0.5);
//;       if ($opposite_side > ($sides-1)) {$opposite_side -= $sides;}
//;       my $w_delta=0;
//;       my $h_delta=0;
//;#Modification needed to support different 'sides' options
//;       if ($sides==4) {
//;         if ($s==0) {$w_delta=1;}
//;         if ($s==1) {$h_delta=1;}
//;         if ($s==2) {$w_delta=-1;}
//;         if ($s==3) {$h_delta=-1;}
//;       }
//;       my $h_new = $h+$h_delta;
//;       my $w_new = $w+$w_delta;
      .in_`$bus`_S`$s`_T`$t`(wire_`$h_new`_`$w_new`_`$bus`_S`$opposite_side`_T`$t`),
//;         }
//;       }
//;     }
//;   for (my $i=0; $i<$global_signal_count; $i++) {
      .gin_`${i}`(global_wire_h2l_1_`${i}`_`(int(floor((${w}-2)/2))+2)`_`(int(floor((${h}-2)/2))+2)`),
//;   }
      .gout(global_wire_l2h_0_`${w}`_`${h}`),
      .tile_id(16'h`$tile_addr_hex`)
    );
//;    } elsif ($tile_type eq "empty") {
//;    } elsif ($tile_type eq "io1") {
    `$inst_obj->instantiate()` 
    (
      .clk(clk),
      .reset(reset),
      .config_addr(config_addr),
      .config_data(config_data),
//;       my $s = $io_side; 
//;       my $opposite_side = $s + int($sides*0.5);
//;       if ($opposite_side > ($sides-1)) {$opposite_side -= $sides;}
//;       my $w_delta=0;
//;       my $h_delta=0;
//;#Modification needed to support different 'sides' options
//;       if ($sides==4) {
//;         if ($s==0) {$w_delta=1;}
//;         if ($s==1) {$h_delta=1;}
//;         if ($s==2) {$w_delta=-1;}
//;         if ($s==3) {$h_delta=-1;}
//;       }
//;       my $h_new = $h+$h_delta;
//;       my $w_new = $w+$w_delta;
      .p2f(wire_`$h`_`$w`_BUS1_S`$s`_T0),
      .f2p(wire_`$h_new`_`$w_new`_BUS1_S`$opposite_side`_T0),
      .pad(pad_S`$opposite_side`_T`$io_count`),
      .tile_id(16'h`$tile_addr_hex`)
    );
//;    } elsif ($tile_type eq "io16") {
    `$inst_obj->instantiate()` 
    (
//;       my $s = $io_side;
//;       my $opposite_side = $s + int($sides*0.5);
//;       if ($opposite_side > ($sides-1)) {$opposite_side -= $sides;}
//;       my $w_delta=0;
//;       my $h_delta=0;
//;#Modification needed to support different 'sides' options
//;       if ($sides==4) {
//;         if ($s==0) {$w_delta=1;}
//;         if ($s==1) {$h_delta=1;}
//;         if ($s==2) {$w_delta=-1;}
//;         if ($s==3) {$h_delta=-1;}
//;       }
//;       my $h_new = $h+$h_delta;
//;       my $w_new = $w+$w_delta;
//;       my $h_old = $h-$h_delta;
//;       my $w_old = $w-$w_delta;
//;       my $str = "";
//;       for (my $i=0; $i<16; $i++) {
//;         if ($s==0) {
//;          $str= "${str}wire_".($h_old+$i)."_".($w_old)."_BUS1_S${s}_T0,";
//;         } elsif ($s==1) {
//;          $str= "${str}wire_".($h_old)."_".($w_old+$i)."_BUS1_S${s}_T0,";
//;         } elsif ($s==2) {
//;          $str= "${str}wire_".($h_old+$i)."_".($w_old)."_BUS1_S${s}_T0,";
//;         } else {
//;          $str= "${str}wire_".($h_old)."_".($w_old+$i)."_BUS1_S${s}_T0,";
//;         }
//;       }
//;       $str=~s/,$//;
      .p2f_in({`$str`}),
      .p2f_out(wire_`$h`_`$w`_BUS16_S`$s`_T0),
      .f2p_in(wire_`$h_new`_`$w_new`_BUS16_S`$opposite_side`_T0),
//;       my $str = "";
//;       for (my $i=0; $i<16; $i++) {
//;         if ($s==0) {
//;              $str= "${str}wire_".($h+$i)."_".($w)."_BUS1_S${opposite_side}_T0,";
//;         } elsif ($s==1) {
//;              $str= "${str}wire_".($h)."_".($w+$i)."_BUS1_S${opposite_side}_T0,";
//;         } elsif ($s==2) {
//;              $str= "${str}wire_".($h+$i)."_".($w)."_BUS1_S${opposite_side}_T0,";
//;         } else {
//;              $str= "${str}wire_".($h)."_".($w+$i)."_BUS1_S${opposite_side}_T0,";
//;         }
//;       }
//;       $str=~s/,$//;
      .f2p_out({`$str`})
    );
//;    }
//;   if ($tile_type eq "io1") {
//;     print INFO "  <tile type='$tile_config->{ $tile_type }{ 'type' }' tile_addr='0x$tile_addr_hex' row='$h' col='$w' tracks='BUS1:1 BUS16:0'";
//;   } elsif ($tile_type eq "io16") {
//;     print INFO "  <tile type='$tile_config->{ $tile_type }{ 'type' }' tile_addr='0x$tile_addr_hex' row='$h' col='$w' tracks='BUS1:0 BUS16:1'";
//;   } else {
//;     print INFO "  <tile type='$tile_config->{ $tile_type }{ 'type' }' tile_addr='0x$tile_addr_hex' row='$h' col='$w' tracks='";
//;     foreach my $bus (sort keys %bus_num_tracks_hash) {
//;       print INFO "$bus:$bus_num_tracks_hash{$bus} ";
//;     }
//;     print INFO "'";
//;   }
//;   print INFO ">\n";
//;   if ($tile_type ne "empty") {
//;     open (INP, "<TILE".$inst_obj->mname()) or die "Couldn't open file TILE$inst_obj->mname(), $!";
//;     while (<INP>) {
//;       print INFO $_;
//;     }
//;     close INP;
//;   }
//;   print INFO "  </tile>\n";
//;   }
//; }

//; #####################################################
//; # Create global wire merge and distribute structure
//; #####################################################
//; my $obj = generate("global_signal_tile", "gst", global_signal_count=>$global_signal_count);
//; my %gst_hash_new;
//; my %gst_hash_old = %tile_grid;  
//; my $incr=1;
//; my $height=$cgra_grid_height;
//; my $width=$cgra_grid_width;
//; my $new_tile_addr = $core_tile_addr;
//; my $last_tile_addr = 0;
//; ####### tile ordering for connecting global signal tiles
//; # 0   1
//; # 3   2
//; #######
//; while (1) {
//; ####### 
//; ####### instantiate wires for each gst level 
//; ####### 
//;   my %wire_hash = ();
//;   my $next_h=2;
//;   for (my $h=2; $h<($height/$incr); $h+=2) {
//;     my $next_w=2;
//;     for (my $w=2; $w<($width/$incr); $w+=2) {
//;       for (my $i=0; $i<4; $i++) {
//;         my $key = "global_wire_h2l_".($incr*2)."_${i}_".(int(floor((${next_w}-2)/2))+2)."_".(int(floor((${next_h}-2)/2))+2);
//;         $wire_hash{$key} = 1;
//;       } 
//;       my $key = "global_wire_l2h_${incr}_${next_w}_${next_h}";
//;       $wire_hash{$key} = 1;
//;       $next_w++;
//;     }
//;     $next_h++;
//;   }
//;   foreach my $w (keys(%wire_hash)) {
//;     if ($incr!=1) {
    wire `$w`;
//;     }
//;   }
//; ####### 
//; ####### instantiate all tiles for a gst level 
//; ####### 
//;   my $next_h=2;
//;   for (my $h=2; $h<($height/$incr); $h+=2) {
//;     my $next_w=2;
//;     for (my $w=2; $w<($width/$incr); $w+=2) {
//;       my @keys;
//;       $keys[0] = (${w}+0)."_".(${h}+0);
//;       $keys[1] = (${w}+1)."_".(${h}+0);
//;       $keys[2] = (${w}+1)."_".(${h}+1);
//;       $keys[3] = (${w}+0)."_".(${h}+1);
//;       my $found=0;
//;       my $new_key = "${next_w}_${next_h}";
//;       $gst_hash_new{ ${new_key} } = "empty";
//;       for (my $i=0; $i<4; $i++) {
//;         my $key = $keys[$i];
//;         my $child_type = $gst_hash_old{ $key };
//;         if ($child_type eq "mem" || $child_type eq "pe" || $child_type eq "gst") {
//;           $found = 1;
//;         }
//;       }
//;       if ($found==1) {
//;         $gst_hash_new{ ${new_key} } = "gst";
//;         $gst_hash_new{ "${new_key}_addr" } = ${new_tile_addr};
//;         my $new_tile_addr_hex = sprintf("%X",$new_tile_addr);
//;         print INFO "  <tile type='gst' tile_addr='0x$new_tile_addr_hex'>\n";
//;         print INFO "    <controlled_tiles>\n";
//;         my $inst_obj = clone($obj, "gst_0x${new_tile_addr_hex}");
    `$inst_obj->instantiate()` 
    (
      .clk(clk),
      .reset(reset),
      .config_addr(config_addr),
      .config_data(config_data),
      .tile_id(16'h`$new_tile_addr_hex`),
//;         for (my $i=0; $i<4; $i++) {
//;           my $child_key = $keys[$i];
//;           my $child_type = $gst_hash_old{ $child_key };
//;           my $child_addr = $gst_hash_old{ "${child_key}_addr" };
//;           my $child_addr_hex = sprintf("%X",$child_addr);
//;           if ($child_type eq "mem" || $child_type eq "pe" || $child_type eq "gst") {
      .gout_l_`$i`(global_wire_h2l_`$incr`_`$i`_`$new_key`), 
      .gin_u_`$i`(global_wire_h2l_`($incr*2)`_`$i`_`(int(floor((${next_w}-2)/2))+2)`_`(int(floor((${next_h}-2)/2))+2)`), 
      .gin_l_`$i`(global_wire_l2h_`(floor($incr/2))`_`$child_key`), 
//;             print INFO "      <tile>0x${child_addr_hex}</tile>\n";
//;           } else {
      .gout_l_`$i`(), 
      .gin_u_`$i`(1'b0), 
      .gin_l_`$i`(1'b0), 
//;           }
//;         }
      .gout_u(global_wire_l2h_`$incr`_`$new_key`)
//;         $new_tile_addr++;
//;         print INFO "    </controlled_tiles>\n";
//;         print INFO "  </tile>\n";
    );
//;       }
//;       $next_w++;
//;     }
//;     $next_h++;
//;   }
//;   foreach my $key (keys %gst_hash_new) {
//;   }
//;   %gst_hash_old = %gst_hash_new;
//;   print INFO "####################GST level: $incr #################\n";
//;   if (($new_tile_addr - $last_tile_addr)==0 || ($incr >= 1024)) {last;}
//;   $last_tile_addr = $new_tile_addr;
//;   $incr*=2;
//; }
//; print INFO "</CGRA>\n";
//; close INFO;
endmodule
